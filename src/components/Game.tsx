import React, { useState, useEffect, useRef } from 'react';
import type { GameState } from '../utils/gameUtils';
import { createNewGame, processGuess, nextRound, skipRound } from '../utils/gameUtils';
import { isGuessCorrect } from '../utils/textNormalization';
import { saveScore, isHighScore } from '../utils/localStorage';
import GameHeader from './GameHeader';
import ImageDisplay from './ImageDisplay';
import GuessInput from './GuessInput';
import FeedbackCard from './FeedbackCard';
import GameComplete from './GameComplete';
import PinkEndingScreen from './PinkEndingScreen';
import JumpscareScreen from './JumpscareScreen';

const Game: React.FC = () => {
  const [gameState, setGameState] = useState<GameState>(() => createNewGame());
  const [guess, setGuess] = useState('');
  const [showNewHighScore, setShowNewHighScore] = useState(false);
  const [showBlackScreen, setShowBlackScreen] = useState(false);
  const [showFinalScaryScreen, setShowFinalScaryScreen] = useState(false);
  const [showSinisterMessage, setShowSinisterMessage] = useState(false);
  const [showPinkEnding, setShowPinkEnding] = useState(false);
  const [showJumpscare, setShowJumpscare] = useState(false);
  const feedbackRef = useRef<HTMLDivElement>(null);
  const audioRef = useRef<HTMLAudioElement>(null);
  const transitionAudioRef = useRef<HTMLAudioElement>(null);
  const laughAudioRef = useRef<HTMLAudioElement>(null);
  const sinisterAudioRef = useRef<HTMLAudioElement>(null);
  const clockTickingAudioRef = useRef<HTMLAudioElement>(null);
  const laughIntervalRef = useRef<NodeJS.Timeout | null>(null);

  const currentRound = gameState.rounds[gameState.currentRoundIndex];
  
  // 6. karakterden sonra korkun√ß tema aktif olur
  const isDarkMode = gameState.currentRoundIndex >= 6;

  useEffect(() => {
    // Focus feedback area for screen readers when feedback changes
    if (gameState.hasAnswered && feedbackRef.current) {
      feedbackRef.current.focus();
    }
  }, [gameState.hasAnswered]);

  useEffect(() => {
    console.log(`üîç useEffect: isDarkMode=${isDarkMode}, currentRound=${gameState.currentRoundIndex}`);
    
    // Korkun√ß tema aktif olduƒüunda audio √ßal ve siyah ekran g√∂ster
    if (isDarkMode && gameState.currentRoundIndex === 6) {
      console.log('üéµ Starting scary theme audio...');
      // ƒ∞lk kez dark mode'a ge√ßiyoruz - siyah ekran g√∂ster
      setShowBlackScreen(true);
      
      // Ge√ßi≈ü audiosu √ßal (3 saniye)
      if (transitionAudioRef.current) {
        transitionAudioRef.current.volume = 0.5;
        transitionAudioRef.current.play().catch(console.error);
      }
      
      // 3 saniye sonra siyah ekranƒ± kaldƒ±r ve ana korkun√ß m√ºziƒüi √ßal
      setTimeout(() => {
        setShowBlackScreen(false);
        
        // Ge√ßi≈ü audiosu durdur
        if (transitionAudioRef.current) {
          transitionAudioRef.current.pause();
          transitionAudioRef.current.currentTime = 0;
        }
        
        // Ana korkun√ß m√ºzik √ßal
        if (audioRef.current) {
          audioRef.current.volume = 0.3; // Ses seviyesi %30
          audioRef.current.loop = true; // D√∂ng√ºde √ßal
          audioRef.current.play().catch(console.error);
        }

        // Saat tikleme sesi √ßal (korkun√ß tema i√ßin)
        if (clockTickingAudioRef.current) {
          clockTickingAudioRef.current.volume = 0.4; // Ses seviyesi %40
          clockTickingAudioRef.current.loop = true; // D√∂ng√ºde √ßal
          clockTickingAudioRef.current.play().catch(console.error);
        }

        // Diabolic laugh interval'ini ba≈ülat (7-8 saniye arasƒ±) - sadece yoksa
        if (!laughIntervalRef.current) {
          console.log('‚è∞ Creating initial laugh interval...');
          laughIntervalRef.current = setInterval(() => {
            if (laughAudioRef.current) {
              laughAudioRef.current.volume = 0.8; // Ses seviyesi artƒ±rƒ±ldƒ±
              laughAudioRef.current.currentTime = 0;
              laughAudioRef.current.play().catch(console.error);
            }
          }, 7500); // 7.5 saniye
        }
      }, 3000);
    } else if (isDarkMode && audioRef.current && !showBlackScreen) {
      console.log('üéµ Already in dark mode, continuing audio...');
      // Zaten dark mode'dayƒ±z, sadece ana audio √ßal
      audioRef.current.volume = 0.3;
      audioRef.current.loop = true;
      audioRef.current.play().catch(console.error);

      // Diabolic laugh interval'ini ba≈ülat (sadece yoksa)
      if (!laughIntervalRef.current) {
        console.log('‚è∞ Creating laugh interval...');
        laughIntervalRef.current = setInterval(() => {
          if (laughAudioRef.current) {
            laughAudioRef.current.volume = 0.8; // Ses seviyesi artƒ±rƒ±ldƒ±
            laughAudioRef.current.currentTime = 0;
            laughAudioRef.current.play().catch(console.error);
          }
        }, 7500); // 7.5 saniye
      } else {
        console.log('‚è∞ Laugh interval already exists, skipping...');
      }
    } else if (!isDarkMode && audioRef.current) {
      audioRef.current.pause();
      // Dark mode deƒüilse saat tikleme sesini de durdur
      if (clockTickingAudioRef.current) {
        clockTickingAudioRef.current.pause();
      }
    }

    // Cleanup function
    return () => {
      if (laughIntervalRef.current) {
        clearInterval(laughIntervalRef.current);
        laughIntervalRef.current = null;
      }
      if (clockTickingAudioRef.current) {
        clockTickingAudioRef.current.pause();
        clockTickingAudioRef.current.currentTime = 0;
      }
    };
  }, [isDarkMode, gameState.currentRoundIndex, showBlackScreen]);

  const handleSubmitGuess = () => {
    if (!guess.trim() || gameState.hasAnswered) return;

    const isCorrect = isGuessCorrect(
      guess,
      currentRound.character.name,
      currentRound.character.aliases
    );

    const newGameState = processGuess(gameState, isCorrect, isDarkMode);
    setGameState(newGameState);
    setGuess('');

    // Korkun√ß temada doƒüru cevap verince 2.5 saniye bekleyip sonraki karaktere ge√ß
    if (isDarkMode && isCorrect) {
      setTimeout(() => {
        const nextGameState = nextRound(newGameState);
        setGameState(nextGameState);

        if (nextGameState.isGameComplete) {
          // Oyun bittiƒüinde final scary screen g√∂ster
          setShowFinalScaryScreen(true);
        }
      }, 2500); // 2.5 saniye bekle
    }
  };

  const handleNextRound = () => {
    const newGameState = nextRound(gameState);
    setGameState(newGameState);

    if (newGameState.isGameComplete) {
      // Oyun bittiƒüinde final scary screen g√∂ster
      setShowFinalScaryScreen(true);
    }
  };

  const handleSkipRound = () => {
    const newGameState = skipRound(gameState, isDarkMode);
    setGameState(newGameState);

    // Korkun√ß temada skip yaparken 2.5 saniye bekleyip sonraki karaktere ge√ß
    if (isDarkMode) {
      setTimeout(() => {
        const nextGameState = nextRound(newGameState);
        setGameState(nextGameState);

        if (nextGameState.isGameComplete) {
          setShowFinalScaryScreen(true);
        }
      }, 2500); // 2.5 saniye bekle
    } else if (newGameState.isGameComplete) {
      // Normal temada oyun bittiƒüinde final scary screen g√∂ster
      setShowFinalScaryScreen(true);
    }
  };

  const handleFinalScaryClick = () => {
    setShowSinisterMessage(true);
    
    // Sinister m√ºzik √ßal
    if (sinisterAudioRef.current) {
      sinisterAudioRef.current.volume = 0.4;
      sinisterAudioRef.current.play().catch(console.error);
    }
    
    // 3 saniye sonra pembe ending'e ge√ß
    setTimeout(() => {
      // T√úM korkun√ß m√ºzikleri ve interval'leri ZORLA durdur
      console.log('üõë FORCING ALL SCARY AUDIO TO STOP...');
      
      // DOM'daki T√úM audio elementlerini bul ve durdur (cursed-audio i√ßeren)
      const allAudioElements = document.querySelectorAll('audio');
      allAudioElements.forEach((audio, index) => {
        const src = audio.currentSrc || audio.src;
        if (src && src.includes('cursed-audio')) {
          console.log(`üîá FOUND CURSED AUDIO ${index}: ${src}`);
          audio.pause();
          audio.currentTime = 0;
          audio.volume = 0;
          audio.loop = false;
          console.log(`‚úÖ STOPPED CURSED AUDIO ${index}`);
        }
      });
      
      // Ana cursed audio (audioRef)
      if (audioRef.current) {
        audioRef.current.pause();
        audioRef.current.currentTime = 0;
        audioRef.current.volume = 0;
        audioRef.current.loop = false;
        console.log('üîá Main cursed audio stopped');
      }
      
      // Sinister audio (aynƒ± dosya)
      if (sinisterAudioRef.current) {
        sinisterAudioRef.current.pause();
        sinisterAudioRef.current.currentTime = 0;
        sinisterAudioRef.current.volume = 0;
        sinisterAudioRef.current.loop = false;
        console.log('üîá Sinister audio stopped');
      }
      
      // Laugh audio
      if (laughAudioRef.current) {
        laughAudioRef.current.pause();
        laughAudioRef.current.currentTime = 0;
        laughAudioRef.current.volume = 0;
        laughAudioRef.current.loop = false;
        console.log('üîá Laugh audio stopped');
      }
      
      // Laugh interval'ini de durdur
      if (laughIntervalRef.current) {
        clearInterval(laughIntervalRef.current);
        laughIntervalRef.current = null;
        console.log('‚èπÔ∏è Laugh interval cleared');
      }
      
      // Transition audio da durdur
      if (transitionAudioRef.current) {
        transitionAudioRef.current.pause();
        transitionAudioRef.current.currentTime = 0;
        transitionAudioRef.current.volume = 0;
        transitionAudioRef.current.loop = false;
        console.log('üîá Transition audio stopped');
      }

      // Saat tikleme sesini de durdur
      if (clockTickingAudioRef.current) {
        clockTickingAudioRef.current.pause();
        clockTickingAudioRef.current.currentTime = 0;
        clockTickingAudioRef.current.volume = 0;
        clockTickingAudioRef.current.loop = false;
        console.log('üîá Clock ticking audio stopped');
      }
      
      setShowFinalScaryScreen(false);
      setShowSinisterMessage(false);
      setShowPinkEnding(true);
      
      // Pembe sparkle m√ºziƒüi √ßal
      setTimeout(() => {
        console.log('üéµ Trying to play sparkle audio...');
        // Sparkle audio artƒ±k PinkEndingScreen component'inde √ßalƒ±yor
        console.log('‚ú® Pink screen will handle its own audio');
      }, 100); // Kƒ±sa gecikme ile √ßal
    }, 3000);
  };

  const handlePinkEndingClick = () => {
    console.log('üíñ PINK ENDING: Heart clicked, going to jumpscare...');
    
    setShowPinkEnding(false);
    setShowJumpscare(true);
    
    // 2 saniye sonra ger√ßek biti≈ü ekranƒ±na ge√ß
    setTimeout(() => {
      console.log('‚è∞ JUMPSCARE: Time up, going to final screen...');
      setShowJumpscare(false);
      
      // Y√ºksek skor kontrol√º
      if (isHighScore(gameState.score)) {
        setShowNewHighScore(true);
        saveScore(gameState.score, gameState.rounds.length);
      }
    }, 2000);
  };

  const handlePlayAgain = () => {
    console.log('üîÑ PLAY AGAIN: Cleaning up all audio and intervals...');
    
    // T√úM interval'leri agresif bir ≈üekilde temizle
    if (laughIntervalRef.current) {
      console.log('‚èπÔ∏è Clearing laugh interval...');
      clearInterval(laughIntervalRef.current);
      laughIntervalRef.current = null;
    }
    
    // G√ºvenlik i√ßin - t√ºm √ßalƒ±≈üan interval'leri durdur
    const highestTimeoutId = setTimeout(() => {}, 0) as unknown as number;
    for (let i = highestTimeoutId; i >= 0; i--) {
      clearInterval(i);
      clearTimeout(i);
    }

    setGameState(createNewGame());
    setShowNewHighScore(false);
    setGuess('');
    setShowBlackScreen(false);
    setShowFinalScaryScreen(false);
    setShowSinisterMessage(false);
    setShowPinkEnding(false);
    setShowJumpscare(false);
    
    // T√ºm audio'larƒ± durdur
    if (audioRef.current) {
      audioRef.current.pause();
      audioRef.current.currentTime = 0;
    }
    if (transitionAudioRef.current) {
      transitionAudioRef.current.pause();
      transitionAudioRef.current.currentTime = 0;
    }
    if (laughAudioRef.current) {
      laughAudioRef.current.pause();
      laughAudioRef.current.currentTime = 0;
    }
    if (clockTickingAudioRef.current) {
      clockTickingAudioRef.current.pause();
      clockTickingAudioRef.current.currentTime = 0;
    }
    if (sinisterAudioRef.current) {
      sinisterAudioRef.current.pause();
      sinisterAudioRef.current.currentTime = 0;
    }
  };

  const handleKeyPress = (event: React.KeyboardEvent) => {
    if (event.key === 'Enter' && !gameState.hasAnswered) {
      handleSubmitGuess();
    }
  };

  // YENƒ∞ JUMPSCARE EKRAN - TEMƒ∞Z VERSƒ∞YON
  if (showJumpscare) {
    return <JumpscareScreen />;
  }

  // YENƒ∞ PEMBE EKRAN - TEMƒ∞Z VERSƒ∞YON
  if (showPinkEnding) {
    return <PinkEndingScreen onHeartClick={handlePinkEndingClick} />;
  }

  // Final scary screen g√∂ster
  if (showFinalScaryScreen) {
    return (
      <div className="min-h-screen bg-black flex items-center justify-center overflow-hidden">
        {/* Sinister m√ºzik */}
        <audio ref={sinisterAudioRef} preload="auto">
          <source src="/audio/cursed-audio.mp3" type="audio/mpeg" />
        </audio>
        
        {/* Korkun√ß gif g√∂zler - aynƒ± pozisyonlarda */}
        <div className="w-full h-full relative">
          {/* Sol √ºst k√∂≈üe */}
          <div className="absolute top-8 left-8 w-16 h-16">
            <img src="/images/i-can-see-you-dark.gif" alt="" className="w-full h-full object-contain opacity-90" />
          </div>
          
          {/* Saƒü √ºst k√∂≈üe */}
          <div className="absolute top-12 right-12 w-20 h-20">
            <img src="/images/i-can-see-you-dark.gif" alt="" className="w-full h-full object-contain opacity-80" />
          </div>
          
          {/* Sol orta */}
          <div className="absolute top-1/3 left-4 w-14 h-14">
            <img src="/images/i-can-see-you-dark.gif" alt="" className="w-full h-full object-contain opacity-85" />
          </div>
          
          {/* Saƒü orta */}
          <div className="absolute top-2/3 right-8 w-18 h-18">
            <img src="/images/i-can-see-you-dark.gif" alt="" className="w-full h-full object-contain opacity-90" />
          </div>
          
          {/* Merkez √ºst */}
          <div className="absolute top-16 left-1/2 transform -translate-x-1/2 w-12 h-12">
            <img src="/images/i-can-see-you-dark.gif" alt="" className="w-full h-full object-contain opacity-75" />
          </div>
          
          {/* Sol alt */}
          <div className="absolute bottom-20 left-16 w-16 h-16">
            <img src="/images/i-can-see-you-dark.gif" alt="" className="w-full h-full object-contain opacity-85" />
          </div>
          
          {/* Saƒü alt */}
          <div className="absolute bottom-24 right-20 w-14 h-14">
            <img src="/images/i-can-see-you-dark.gif" alt="" className="w-full h-full object-contain opacity-80" />
          </div>
          
          {/* Merkez alt */}
          <div className="absolute bottom-16 left-1/2 transform -translate-x-1/2 w-20 h-20">
            <img src="/images/i-can-see-you-dark.gif" alt="" className="w-full h-full object-contain opacity-90" />
          </div>
          
          {/* TAM MERKEZ - En b√ºy√ºk g√∂z */}
          <div className="absolute top-1/2 left-1/2 transform -translate-x-1/2 -translate-y-1/2 w-24 h-24">
            <img src="/images/i-can-see-you-dark.gif" alt="" className="w-full h-full object-contain opacity-95" />
          </div>
        </div>

        {/* Merkez kutu ve mesaj */}
        <div className="absolute inset-0 flex flex-col items-center justify-center z-10">
          {showSinisterMessage ? (
            // Sinister mesaj g√∂ster
            <h1 className="text-red-500 text-3xl md:text-5xl font-bold text-center animate-pulse drop-shadow-2xl px-4">
              Attƒ±ƒüƒ±m link sence g√ºvenli miydi?
            </h1>
          ) : (
            // Yanƒ±p s√∂nen kutu
            <div 
              onClick={handleFinalScaryClick}
              className="bg-black border-4 border-red-600 rounded-lg p-8 cursor-pointer hover:bg-red-900 transition-all duration-300 hover:scale-105 animate-pulse"
            >
              <div className="text-red-500 text-8xl text-center animate-bounce">
                ?
              </div>
            </div>
          )}
        </div>
      </div>
    );
  }

  if (gameState.isGameComplete) {
    return (
      <GameComplete
        score={gameState.score}
        totalRounds={gameState.rounds.length}
        showNewHighScore={showNewHighScore}
        onPlayAgain={handlePlayAgain}
      />
    );
  }

  return (
    <div className={`min-h-screen flex flex-col p-4 transition-all duration-1000 ${
      isDarkMode 
        ? 'bg-black' 
        : 'bg-gradient-to-br from-sky-400 to-emerald-400'
    }`}>
      {/* Korkun√ß tema i√ßin ana audio */}
      <audio ref={audioRef} preload="auto">
        <source src="/audio/cursed-audio.mp3" type="audio/mpeg" />
      </audio>
      
      {/* 3 saniyelik ge√ßi≈ü audiosu */}
      <audio ref={transitionAudioRef} preload="auto">
        <source src="/audio/censor-beep-1-372459.mp3" type="audio/mpeg" />
      </audio>

      {/* Diabolic laugh audio (7-8 saniyede bir) */}
      <audio ref={laughAudioRef} preload="auto">
        <source src="/audio/diabolic-laugh-202978.mp3" type="audio/mpeg" />
      </audio>

      {/* Saat tikleme sesi (korkun√ß tema i√ßin) */}
      <audio ref={clockTickingAudioRef} preload="auto">
        <source src="/audio/slow-cinematic-clock-ticking-357979.mp3" type="audio/mpeg" />
      </audio>
      
      {/* 3 saniyelik siyah ekran overlay - korkun√ß gif g√∂zler i√ßin */}
      {showBlackScreen && (
        <div className="fixed inset-0 bg-black z-50 overflow-hidden">
          {/* Korkun√ß gif g√∂zler - sƒ±k sƒ±k ekranda */}
          <div className="w-full h-full relative">
            {/* Sol √ºst k√∂≈üe */}
            <div className="absolute top-8 left-8 w-16 h-16">
              <img src="/images/i-can-see-you-dark.gif" alt="" className="w-full h-full object-contain opacity-90" />
            </div>
            
            {/* Saƒü √ºst k√∂≈üe */}
            <div className="absolute top-12 right-12 w-20 h-20">
              <img src="/images/i-can-see-you-dark.gif" alt="" className="w-full h-full object-contain opacity-80" />
            </div>
            
            {/* Sol orta */}
            <div className="absolute top-1/3 left-4 w-14 h-14">
              <img src="/images/i-can-see-you-dark.gif" alt="" className="w-full h-full object-contain opacity-85" />
            </div>
            
            {/* Saƒü orta */}
            <div className="absolute top-2/3 right-8 w-18 h-18">
              <img src="/images/i-can-see-you-dark.gif" alt="" className="w-full h-full object-contain opacity-90" />
            </div>
            
            {/* Merkez √ºst */}
            <div className="absolute top-16 left-1/2 transform -translate-x-1/2 w-12 h-12">
              <img src="/images/i-can-see-you-dark.gif" alt="" className="w-full h-full object-contain opacity-75" />
            </div>
            
            {/* Sol alt */}
            <div className="absolute bottom-20 left-16 w-16 h-16">
              <img src="/images/i-can-see-you-dark.gif" alt="" className="w-full h-full object-contain opacity-85" />
            </div>
            
            {/* Saƒü alt */}
            <div className="absolute bottom-24 right-20 w-14 h-14">
              <img src="/images/i-can-see-you-dark.gif" alt="" className="w-full h-full object-contain opacity-80" />
            </div>
            
            {/* Merkez alt */}
            <div className="absolute bottom-16 left-1/2 transform -translate-x-1/2 w-20 h-20">
              <img src="/images/i-can-see-you-dark.gif" alt="" className="w-full h-full object-contain opacity-90" />
            </div>
            
            {/* TAM MERKEZ - En b√ºy√ºk g√∂z */}
            <div className="absolute top-1/2 left-1/2 transform -translate-x-1/2 -translate-y-1/2 w-24 h-24">
              <img src="/images/i-can-see-you-dark.gif" alt="" className="w-full h-full object-contain opacity-95" />
            </div>
          </div>
        </div>
      )}
      <div className="max-w-2xl mx-auto w-full flex flex-col flex-grow">
        {/* Normal temada header g√∂ster */}
        {!isDarkMode && (
          <GameHeader
            score={gameState.score}
            currentRound={gameState.currentRoundIndex + 1}
            totalRounds={gameState.rounds.length}
            isDarkMode={isDarkMode}
          />
        )}

        <div className="flex-grow flex flex-col justify-center">
          {/* Resmi her zaman g√∂ster */}
          <ImageDisplay
            character={currentRound.character}
            revealed={gameState.hasAnswered}
            isDarkMode={isDarkMode}
          />

          <div className={isDarkMode ? "flex items-center justify-center mt-8" : "mt-6"}>
            {gameState.hasAnswered && !isDarkMode ? (
              // Normal temada feedback g√∂ster
              <div ref={feedbackRef} tabIndex={-1}>
                <FeedbackCard
                  isCorrect={gameState.lastGuessCorrect || false}
                  characterName={currentRound.character.name}
                  onNext={handleNextRound}
                />
              </div>
            ) : (
              // Korkun√ß temada feedback yok, sadece input
              <GuessInput
                value={guess}
                onChange={setGuess}
                onSubmit={handleSubmitGuess}
                onSkip={handleSkipRound}
                onKeyPress={handleKeyPress}
                disabled={gameState.hasAnswered && isDarkMode} // Korkun√ß temada doƒüru cevap verince disabled
                isDarkMode={isDarkMode}
              />
            )}
          </div>
        </div>
      </div>
    </div>
  );
};

export default Game;
